@page
@using System.Text.Json
@model AccountingLedger.Web.Pages.JournalEntries.CreateModel
@{
    ViewData["Title"] = "Create Journal Entry";
    var serializedAccounts = JsonSerializer.Serialize(Model.Accounts.Select(a => new { a.Id, a.Name }));
}

<h2 class="mb-4">Create Journal Entry</h2>

<form method="post">
    <div class="mb-4 p-4 border rounded bg-light shadow-sm">
        <div class="mb-3">
            <label asp-for="Command.Date" class="form-label">Date:</label>
            <input type="date" asp-for="Command.Date" class="form-control" />
            <span asp-validation-for="Command.Date" class="text-danger small"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Command.Description" class="form-label">Description:</label>
            <input type="text" asp-for="Command.Description" class="form-control" />
            <span asp-validation-for="Command.Description" class="text-danger small"></span>
        </div>

        <h4 class="mb-3">Journal Entry Lines</h4>
        <div id="journalEntryLinesContainer">
            @if (!Model.Command.Lines.Any())
            {
                @Html.Partial("_JournalEntryLinePartial",
                         new AccountingLedger.Application.Features.JournalEntries.Commands.JournalEntryLineDto(),
                         new ViewDataDictionary<AccountingLedger.Application.Features.JournalEntries.Commands.JournalEntryLineDto>(
                         ViewContext.ViewData.ModelMetadata, ViewContext.ModelState)
            {
            { "index", 0 },
            { "Accounts", Model.Accounts },
            { "HtmlFieldPrefix", "Command.Lines[0]" }
            })
            }
            else
            {
                for (int i = 0; i < Model.Command.Lines.Count; i++)
                {
                    var model = Model.Command.Lines[i];
                    var fieldPrefix = $"Command.Lines[{i}]";

                    var viewData = new ViewDataDictionary<AccountingLedger.Application.Features.JournalEntries.Commands.JournalEntryLineDto>(
                    ViewContext.ViewData.ModelMetadata, ViewContext.ModelState)
            {
            { "index", i },
            { "HtmlFieldPrefix", fieldPrefix },
            { "Accounts", Model.Accounts }
            };

                    @Html.Partial("_JournalEntryLinePartial", model, viewData)
                }
            }
        </div>

        <button type="button" id="addJournalEntryLine" class="btn btn-secondary mt-3">Add Line</button>

        <div class="mt-4 p-3 bg-light border rounded">
            <div class="d-flex justify-content-between mb-2">
                <span class="fw-bold">Total Debit:</span>
                <span id="totalDebit" class="fw-bold text-success">0.00</span>
            </div>
            <div class="d-flex justify-content-between">
                <span class="fw-bold">Total Credit:</span>
                <span id="totalCredit" class="fw-bold text-danger">0.00</span>
            </div>
            <div id="balanceStatus" class="mt-2 fw-bold text-center"></div>
        </div>

        <div class="text-danger small mt-3" asp-validation-summary="ModelOnly"></div>

        <button type="submit" id="submitJournalEntry" class="btn btn-success mt-4">Create Entry</button>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        var accountOptions = @Html.Raw(@serializedAccounts);
        var lineIndex = @(Model.Command.Lines.Count == 0 ? 0 : Model.Command.Lines.Count);

        function updateTotals() {
            let totalDebit = 0, totalCredit = 0;
            document.querySelectorAll('#journalEntryLinesContainer .journal-entry-line').forEach(line => {
                totalDebit += parseFloat(line.querySelector('input[name$=".Debit"]')?.value || 0);
                totalCredit += parseFloat(line.querySelector('input[name$=".Credit"]')?.value || 0);
            });

            document.getElementById('totalDebit').textContent = totalDebit.toFixed(2);
            document.getElementById('totalCredit').textContent = totalCredit.toFixed(2);

            const status = document.getElementById('balanceStatus');
            const submit = document.getElementById('submitJournalEntry');

            if (totalDebit === totalCredit && totalDebit > 0) {
                status.textContent = "Entry is Balanced!";
                status.className = "mt-2 fw-bold text-center text-success";
                submit.disabled = false;
            } else if (totalDebit === 0 && totalCredit === 0) {
                status.textContent = "Entry is not yet balanced (empty lines).";
                status.className = "mt-2 fw-bold text-center text-warning";
                submit.disabled = true;
            } else {
                status.textContent = "Entry is NOT Balanced!";
                status.className = "mt-2 fw-bold text-center text-danger";
                submit.disabled = true;
            }
        }

        document.getElementById('addJournalEntryLine').addEventListener('click', function () {
            const container = document.getElementById('journalEntryLinesContainer');
            const i = lineIndex++;
            const div = document.createElement('div');
            div.className = 'journal-entry-line border rounded p-3 mb-3 bg-white';

            div.innerHTML = `
                <div class="mb-2">
                    <label class="form-label">Account:</label>
                    <select name="Command.Lines[${i}].AccountId" class="form-select">
                        <option value="">Select Account</option>
                        ${accountOptions.map(acc => `<option value="${acc.Id}">${acc.Name}</option>`).join('')}
                    </select>
                    <span data-valmsg-for="Command.Lines[${i}].AccountId" class="text-danger small"></span>
                </div>
                <div class="mb-2">
                    <label class="form-label">Debit:</label>
                    <input type="number" step="0.01" name="Command.Lines[${i}].Debit" class="form-control" value="0" />
                    <span data-valmsg-for="Command.Lines[${i}].Debit" class="text-danger small"></span>
                </div>
                <div class="mb-2">
                    <label class="form-label">Credit:</label>
                    <input type="number" step="0.01" name="Command.Lines[${i}].Credit" class="form-control" value="0" />
                    <span data-valmsg-for="Command.Lines[${i}].Credit" class="text-danger small"></span>
                </div>
                <button type="button" class="btn btn-sm btn-danger remove-line">Remove</button>
            `;

            container.appendChild(div);
            $(div).find('input, select').on('change keyup', updateTotals);
            $(div).find('.remove-line').on('click', function () {
                $(this).closest('.journal-entry-line').remove();
                updateTotals();
            });

            $.validator.unobtrusive.parse(div);
            updateTotals();
        });

        document.getElementById('journalEntryLinesContainer').addEventListener('change', e => {
            if (e.target.name?.includes(".Debit") || e.target.name?.includes(".Credit")) updateTotals();
        });

        document.getElementById('journalEntryLinesContainer').addEventListener('keyup', e => {
            if (e.target.name?.includes(".Debit") || e.target.name?.includes(".Credit")) updateTotals();
        });

        $(document).ready(function () {
            updateTotals();
            $('#journalEntryLinesContainer').find('input, select').on('change keyup', updateTotals);
            $('#journalEntryLinesContainer').find('.remove-line').on('click', function () {
                $(this).closest('.journal-entry-line').remove();
                updateTotals();
            });
        });
    </script>
}
